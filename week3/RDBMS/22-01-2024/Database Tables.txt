Inventory Management System
--------------------------------------------------
Products Table:-
product_id	INT	Primary key, unique identifier for each product
product_name	VARCHAR(100)	Name of the product
description	VARCHAR(255)	Detailed description of the product
quantity_in_stock	INT	Current quantity of the product in stock
reorder_level	INT	Minimum quantity at which a new order should be placed

Suppliers Table:-
supplier_id	INT	Primary key, unique identifier for each supplier
supplier_name	VARCHAR(100)	Name of the supplier
contact_person	VARCHAR(50)	Name of the contact person at the supplier
phone_number	VARCHAR(20)	Phone number of the supplier
email_address	VARCHAR(50)	Email address of the supplier

Order Table:-
order_id	INT	Primary key, unique identifier for each order
order_date	DATETIME	Date and time the order was placed
customer_id	INT	Foreign key, referencing the customer who placed the order
total_amount	DECIMAL(10,2)	Total cost of the order
order_status	VARCHAR(20)	Status of the order (e.g., "pending", "shipped", "completed")

Order Items Table:-
order_item_id	INT	Primary key, unique identifier for each item in an order
order_id	INT	Foreign key, referencing the order to which the item belongs
product_id	INT	Foreign key, referencing the product being ordered
quantity	INT	Quantity of the product being ordered
unit_price	DECIMAL(10,2)	Price per unit of the product
supplier_id	INT	Forign key of the supplier of which purchase entry is been made.

Warehouses Table:-
warehouse_id	INT	Primary key, unique identifier for each warehouse
warehouse_name	VARCHAR(100)	Name of the warehouse
location	VARCHAR(100)	Physical address of the warehouse
capacity	INT	Maximum storage capacity of the warehouse
manager_id	INT	Foreign key, referencing the manager responsible for the warehouse

#######################################################################
Comments:-
1) Supplier_Product_Relation
'->spr_id	INT
'->supplier_id	INT	ForignKey
'->product_id	INT	ForignKey

#######################################################################







Social Media Application
--------------------------------------------------
Users Table:-
user_id	INT	Primary key, unique identifier for each user
username VARCHAR(50) NOT_NULL
email_id VARCHAR(100) NOT_NULL
password VARCHAR(255) NOT_NULL (This value is to be stored in hash format.)
profile_picture Blob 
is_active	boolean (Here default value is been setted to false)

Posts Table:-
post_id	INT	Primary key, unique identifier for each post
user_id	INT	Foreign key, referencing the user who created the post
content	VARCHAR(255)	Text content of the post
created_at	DATETIME	Date and time the post was created
media_type	VARCHAR(20)	Type of media associated with the post (e.g., "photo", "video", "link")
media_url	VARCHAR(255)	URL of the media content (if applicable)

Friends Table:-
user_id	INT	Primary key, referencing one user in the friendship
friend_id	INT	Primary key, referencing the other user in the friendship
status	VARCHAR(20)	Status of the friendship (e.g., "pending", "approved", "blocked")
relationship_type	VARCHAR(20)	Type of relationship (e.g., "friend", "family", "colleague")
best_friend	BOOLEAN		Use to specify close friends
created_at	DATETIME	Date and time the friendship was established

Likes Table:-
user_id	INT	Foreign key, referencing the user who liked the post
post_id	INT	Foreign key, referencing the post that was liked
liked_at	DATETIME	Date and time the user liked the post

Notification Table:-
notification_id INT Primarykey
user_id		INT
content		VARCHAR(255)
isRead		boolean
createdAt	DateTime

Comment Table:-
comment_id INT Primary Key
Post_id INT Foreign Key
user_id INT Foreign Key
content Varchar(500) 
timestamp DateTime
Likes INT 


##################################################################################################


Library Management System
--------------------------------------------------------------------------------------------

1)Book_Table
	Book_id INT Primary_Key
	title Varchar(100) NOT NULL
	Genre_id INT Foreign Key
	author_id INT Foreign Key
	publication_date dateTime
	is_available boolean not null
	quantity INT 

2)Author_Table
	author_id INT PrimaryKey
	author_name Varchar(400) 
	birthday datetime
	nationality varchar(100)
	biography varchar(1000)

3)Members_Table:	
	member_id INT PrimaryKey
	member_name Varchar(200)
	Join_Date datetime
	ending_date datetime
	address varchar(500)
	phone_no number(10)

4)Loans
	loan_id INT Primary_key
	book_id INT Foreign Key
	member_id INT Foreign Key
	loan_date datetime
	return_date datetime

5)Genre_Table
	genre_id INT Primary_key
	name varchar(250) 
	description varchar(250)
	books_type_avail INT
	created_at datetime
	update_time datetime 









CREATE TABLE Users (
  user_id INT PRIMARY KEY IDENTITY(1,1),
  username VARCHAR(50) NOT NULL,
  email_id VARCHAR(100) NOT NULL,
  password VARCHAR(255) NOT NULL,
  profile_picture VARBINARY(MAX),
  is_active BIT DEFAULT 1
);

CREATE TABLE Posts (
  post_id INT PRIMARY KEY IDENTITY(1,1),
  user_id INT NOT NULL,
  content VARCHAR(255) NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  media_type VARCHAR(20),
  media_url VARCHAR(255),
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Friends (
  user_id INT NOT NULL,
  friend_id INT NOT NULL,
  status VARCHAR(20) DEFAULT 'pending',
  relationship_type VARCHAR(20) DEFAULT 'friend',
  best_friend BIT DEFAULT 0,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, friend_id),
  FOREIGN KEY (user_id) REFERENCES Users(user_id),
  FOREIGN KEY (friend_id) REFERENCES Users(user_id)
);

CREATE TABLE Likes (
  user_id INT NOT NULL,
  post_id INT NOT NULL,
  liked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, post_id),
  FOREIGN KEY (user_id) REFERENCES Users(user_id),
  FOREIGN KEY (post_id) REFERENCES Posts(post_id)
);

CREATE TABLE Notifications (
  notification_id INT PRIMARY KEY IDENTITY(1,1),
  user_id INT NOT NULL,
  content VARCHAR(255) NOT NULL,
  isRead BIT DEFAULT 0,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Comments (
  comment_id INT PRIMARY KEY IDENTITY(1,1),
  post_id INT NOT NULL,
  user_id INT NOT NULL,
  content VARCHAR(500) NOT NULL,
  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
  likes INT DEFAULT 0,
  FOREIGN KEY (post_id) REFERENCES Posts(post_id),
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

INSERT INTO Users (username, email_id, password)
VALUES
  ('JohnDoe123', 'johndoe@example.com', 'hashData1'),
  ('JaneSmith456', 'janesmith@example.com', 'hashData2'),
  ('BobJohnson789', 'bobjohnson@example.com', 'hashData3'),
  ('EmilyDavis101', 'emilydavis@example.com', 'hashData4');

INSERT INTO Users (username, email_id, password)
VALUES
  ('Pratik123', 'pratik@example.com', 'hashData1'),
  ('Prakash456', 'prakash@example.com', 'hashData2'),
  ('Prince789', 'prince@example.com', 'hashData3'),
  ('Kartik101', 'kartik@example.com', 'hashData4');

INSERT INTO Posts (user_id, content, media_type, media_url, created_at)
VALUES 
  (5, 'This is my first post!', 'text', NULL,FORMAT(CURRENT_TIMESTAMP,'2024-01-05 12:12:12')),
  (6, 'Check out this amazing photo!', 'image', 'https://example.com/images/photo1.jpg',FORMAT(CURRENT_TIMESTAMP,'2024-01-05 11:11:11')),
  (6, 'Just posted a video tutorial!', 'video', 'https://example.com/videos/tutorial.mp4',FORMAT(CURRENT_TIMESTAMP,'2024-01-06 10:10:10')),
  (7, 'Thoughts on the latest tech trends.', 'text', NULL,FORMAT(CURRENT_TIMESTAMP,'2024-01-07 15:15:15'));

INSERT INTO Friends (user_id, friend_id, status, relationship_type, best_friend, created_at)
VALUES 
  (5, 6, 'accepted', 'friend', 1, '2024-01-19 08:00:00'),
  (6, 7, 'pending', 'friend', 0, '2024-01-19 09:00:00'),
  (7, 8, 'accepted', 'friend', 0, '2024-01-19 10:00:00'),
  (8, 5, 'accepted', 'friend', 1, '2024-01-19 11:00:00'),
  (7, 6, 'pending', 'friend', 0, '2024-01-19 13:00:00'),
  (5, 7, 'accepted', 'friend', 0, '2024-01-19 14:00:00');

  select * from Friends;

INSERT INTO Likes (user_id, post_id, liked_at)
VALUES 
  (5, 2, '2024-01-19 08:30:00'),
  (6, 5, '2024-01-19 09:30:00'),
  (7, 3, '2024-01-19 10:30:00'),
  (8, 4, '2024-01-19 11:30:00'),
  (6, 2, '2024-01-19 12:30:00'),
  (7, 2, '2024-01-19 13:30:00');

  select * from Likes;


INSERT INTO Notifications (user_id, content, isRead, created_at)
VALUES 
  (5, 'You have a new friend request.', 0, '2024-01-19 08:15:00'),
  (6, 'Your post received a new like.', 0, '2024-01-19 09:45:00'),
  (8, 'Your friend request has been accepted.', 0, '2024-01-19 10:45:00'),
  (7, 'Your post received a new like.', 0, '2024-01-19 11:45:00');

  select * from Notifications;

INSERT INTO Comments (post_id, user_id, content, timestamp, likes)
VALUES 
  (4, 6, 'Nice post!', '2024-01-19 08:45:00', 2),
  (2, 7, 'Great photo!', '2024-01-19 09:45:00', 1),
  (3, 5, 'Interesting video!', '2024-01-19 10:45:00', 3),
  (4, 8, 'Thoughtful post!', '2024-01-19 11:45:00', 0),
  (5, 5, 'Beautiful picture!', '2024-01-19 12:45:00', 2);

	
		